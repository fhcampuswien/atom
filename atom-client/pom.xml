<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>at.ac.fhcampuswien.atom</groupId>
		<artifactId>atom</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<artifactId>atom-client</artifactId>

	<!-- atom-server needs a war file of atom-client, since a jar would simply 
		be copied to the lib folder.. -->
	<packaging>war</packaging>

	<properties>
		<gwt.module>at.ac.fhcampuswien.atom.App</gwt.module>
		<gwt.draftCompile>false</gwt.draftCompile>
		<gwt.style>OBFUSCATED</gwt.style>
		<gwt.genParam>false</gwt.genParam>
		<!-- keep in sync with atom-server -->
		<runTarget>https://127.0.0.1:8843/</runTarget>
		<!-- <runTarget>https://localhost:8443/</runTarget> -->
		<!-- <runTarget>http://localhost:8080/</runTarget> -->
	</properties>

	<dependencies>

		<!-- all dependecies in atom-client have scope provided because: -->
		<!--) atom-client is translated to javascript during compile time -->
		<!--) at compile time 'provided' dependencies are available anyway -->
		<!--) those dependencies do not need to be transversed into atom-server -->

		<!-- GWT client side APIs -->
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<scope>provided</scope>
			<version>${gwt.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>atom-core</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>atom-domain</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>atom-reflector</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>

		<!-- get compiled versions of core, domain & reflector -->
		<!-- through dependency chain -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>atom-reflector</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- at.ac.fhcampuswien.atom.client.gui.HistoryPanel uses BiMap from guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava-gwt</artifactId>
			<version>18.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Drag'n'Drop Library; usage in Package at.ac.fhcampuswien.atom.client.gu.dnd -->
		<dependency>
			<groupId>com.allen-sauer.gwt.dnd</groupId>
			<artifactId>gwt-dnd</artifactId>
			<version>3.3.0</version>
			<scope>provided</scope>

			<!-- use for GWT 2.6.0 => <version>3.3.0</version> -->
			<!-- <version>3.2.3</version> -->
			<!-- <version>3.2.3</version> -->
			<!-- <version>[3.1.2,)</version> -->
			<!-- <version>3.2.0</version> -->
		</dependency>

		<!-- Widget-Library, usage in at.ac.fhcampuswien.atom.client.gui.frames.DomainObjectListWidget" -->
		<dependency>
			<groupId>com.sencha.gxt</groupId>
			<artifactId>gxt</artifactId>
			<type>jar</type>
			<scope>provided</scope>
			<version>3.1.1</version>
			<!-- <version>[3.0.0b,)</version> -->
			<!-- <version>3.0.1</version> -->
			<!-- <version>3.1.0-beta</version> -->
			<!-- <version>3.1.0</version> -->
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- controling gwt-compile & css interface generation -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>


				<!-- manually specify the GWT dependencies, so that we can choose gwt 
					and gwt-maven-plugin versions independently of each other -->
				<version>${gwt.mavenplugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-user</artifactId>
						<version>${gwt.version}</version>
					</dependency>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-dev</artifactId>
						<version>${gwt.version}</version>
					</dependency>
					<dependency>
						<groupId>com.google.gwt</groupId>
						<artifactId>gwt-codeserver</artifactId>
						<version>${gwt.version}</version>
					</dependency>
				</dependencies>

				<configuration>
					<module>${gwt.module}</module>
					<strict>true</strict>
					<draftCompile>${gwt.draftCompile}</draftCompile>
					<style>${gwt.style}</style>
					<genParam>${gwt.genParam}</genParam>
					<noserver>true</noserver>
					<runTarget>${runTarget}</runTarget>
					<cssFiles>
						<cssFile>at/ac/fhcampuswien/atom/client/gui/AtomClientBundleStyle.css</cssFile>
					</cssFiles>
					<launcherDir>${project.build.directory}/${project.build.finalName}</launcherDir>

					<extraJvmArgs>-Xmx4096M -Xms1024M</extraJvmArgs>
					<!-- <extraJvmArgs>-Xmx4096M -Xms1024M -XX:PermSize=128m -XX:MaxPermSize=256m</extraJvmArgs> -->
					<!-- <extraJvmArgs>-Xmx1024M -Xms1024m -Xss32m -XX:PermSize=64m -XX:MaxPermSize=128m 
						-XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+CMSPermGenSweepingEnabled 
						-XX:+CMSClassUnloadingEnabled -DgeneratePom=true -XX:ReservedCodeCacheSize=128m 
						-XX:+PrintCompilation -server</extraJvmArgs> -->

					<sourceLevel>1.7</sourceLevel>
					<deploy>${project.build.directory}/gwtc/extra</deploy>
					<extra>${project.build.directory}/gwtc/extra</extra>
					<gen>${project.build.directory}/gwtc/gen</gen>
					<workDir>${project.build.directory}/gwtc/work</workDir>
				</configuration>
				<executions>
					<execution>
						<id>generate-css</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>css</goal>
						</goals>
					</execution>
					<execution>
						<id>gwt-compile</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<packagingExcludes>WEB-INF/**</packagingExcludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>draft</id>
			<activation>
				<property>
					<name>draft</name>
				</property>
			</activation>
			<properties>
				<gwt.module>at.ac.fhcampuswien.atom.App_dev</gwt.module>
				<gwt.draftCompile>true</gwt.draftCompile>
				<gwt.style>PRETTY</gwt.style>
			</properties>
		</profile>
		<profile>
			<id>dev</id>
			<activation>
				<property>
					<name>dev</name>
				</property>
			</activation>
			<build>
				<!-- FIXME: workaround for MGWT-332 -->
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.9.1</version>
						<executions>
							<execution>
								<id>add-shared-sources-to-classpath</id>
								<!-- After 'process-resources' so they're not copied to ${project.build.outputDirectory} -->
								<!-- But before 'compile' to make them available to 'gwt:run' -->
								<phase>compile</phase>
								<goals>
									<goal>add-resource</goal>
								</goals>
								<configuration>
									<resources>
										<!-- Only sources, resources are already in the classpath, by definition -->
										<resource>
											<directory>${basedir}/../atom-shared/src/main/java</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
