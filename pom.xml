<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>at.ac.fhcampuswien.atom</groupId>
	<artifactId>atom</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<prerequisites>
		<maven>${mavenVersion}</maven>
	</prerequisites>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<mavenVersion>3.0</mavenVersion>
		<java.version>1.8</java.version>
		<gwt.version>2.8.0-beta1</gwt.version>
		<gwt.mavenplugin.version>2.8.0-beta1</gwt.mavenplugin.version>

		
		<!-- with dia version 2015-07-02:
				SEVERE: Allocate exception for servlet atomServlet
				java.lang.Error: Unresolved compilation problem:
				at at.ac.fhcampuswien.atom.server.ServerSingleton.getInstance(ServerSingleton.java:62)
			compile error @ HibernateEntityManager hem = em.unwrap(HibernateEntityManager.class);
		 -->
		<!-- <hibernate.version>4.2.19.Final</hibernate.version> -->
	
		<!-- worked fine with dia version from 2015-02 -->
		<!-- <hibernate.version>4.3.1.Final</hibernate.version> -->
		
		<!-- with dia version 2015-07-02: creates exception on every save (commit):
				javax.persistence.RollbackException: Error while committing the transaction
				javax.persistence.PersistenceException: org.hibernate.HibernateException:
				Found shared references to a collection: at.ac.fhcampuswien.atom.shared.domain.PortalPerson.createdInstances -->
		<!-- works again after bugfix: removing duplicate attributes from inherence tree (so that they are unique in the tree) -->
		<hibernate.version>4.3.10.Final</hibernate.version>
		
		<!-- with dia version 2015-07-02:
				emFactory = Persistence.createEntityManagerFactory("atom");
				throws exception:
				javax.persistence.PersistenceException: [PersistenceUnit: atom] Unable to build Hibernate SessionFactory
				cause: java.lang.ClassCastException: java.util.Collections$EmptyIterator cannot be cast to java.lang.Iterable -->
		<!-- <hibernate.version>5.0.0.Beta2</hibernate.version> -->
	
		<!-- with dia version 2015-07-02:
				emFactory = Persistence.createEntityManagerFactory("atom");
				throws exception:
				java.lang.AbstractMethodError: Method com/mchange/v2/c3p0/impl/NewProxyDatabaseMetaData.getSchemas(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet; is abstract
		 -->
		<!-- <hibernate.version>5.0.0.CR1</hibernate.version> -->


	</properties>

	<modules>
		<module>atom-core</module>
		<module>atom-domain</module>
		<module>atom-analyzer</module>
		<module>atom-generator</module>
		<module>atom-reflector</module>
		<module>atom-client</module>
		<module>atom-server</module>
	</modules>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.gwt</groupId>
				<artifactId>gwt</artifactId>
				<version>${gwt.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>3.1.0</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>net.ltgt.gwt.maven</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<inherited>false</inherited>
				<configuration>
					<launcherDir>${project.build.directory}/gwt/launcherDir</launcherDir>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>9.2.15.v20160210</version>
				</plugin>
				<plugin>
					<groupId>net.ltgt.gwt.maven</groupId>
					<artifactId>gwt-maven-plugin</artifactId>
					<version>1.0-rc-6</version>
					<extensions>true</extensions>
					<configuration>
						<sourceLevel>${java.version}</sourceLevel>
						<failOnError>true</failOnError>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.0.0</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>package</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat6-maven-plugin</artifactId>
					<version>2.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.2</version>
				</plugin>
				
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-war-plugin
										</artifactId>
										<versionRange>
											[2.2,)
										</versionRange>
										<goals>
											<goal>war</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>
											[1.10,)
										</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
								
								<!-- this throws error when making it run automatically with eclipse build -->
								<!-- this plugin is used to generate the reflection-emulation code -->
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											exec-maven-plugin
										</artifactId>
										<versionRange>
											[1.4.0,)
										</versionRange>
										<goals>
											<goal>java</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>